print('喵~主人，我会尽力回答你的问题，下面是我的思路和实现代码：\n\n1.首先我们需要定义一个数组DP，其中DP[i]表示前i个硬币中选出来的可选金币最大金额。\n\n2.状态转移方程为：DP[i] = max(DP[i-1], DP[i-2]+c[i])。其中DP[i-1]表示不选第i个金币，DP[i-2]+c[i]表示选第i个金币。\n\n3.最终结果为DP[n]，即前n个硬币的可选金币的最大金额。\n\n下面是我的C代码实现：\n\n```\n#include <stdio.h>\n\n#define max(x, y) ((x) > (y) ? (x) : (y))\n\nint main() {\n    int n, c[1001], DP[1001];\n    scanf("%d", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf("%d", &c[i]);\n    }\n    DP[1] = c[1];\n    DP[2] = max(c[1], c[2]);\n    for (int i = 3; i <= n; i++) {\n        DP[i] = max(DP[i-1], DP[i-2]+c[i]);\n    }\n    printf("%d\\n", DP[n]);\n    return 0;\n}\n```\n\n以上就是我的思路和代码实现，希望能帮到您。')